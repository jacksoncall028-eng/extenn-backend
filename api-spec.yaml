openapi: 3.0.3
info:
  title: InstaSocial API
  description: Instagram-like social media application REST API
  version: 1.0.0
  contact:
    name: API Support
    email: api@instasocial.com

servers:
  - url: http://localhost:3000/api/v1
    description: Development server
  - url: https://api.instasocial.com/v1
    description: Production server

tags:
  - name: Auth
    description: Authentication and authorization
  - name: Users
    description: User profiles and management
  - name: Posts
    description: Post creation and management
  - name: Feed
    description: User feed operations
  - name: Social
    description: Likes, comments, follows
  - name: Chat
    description: Realtime messaging
  - name: Notifications
    description: Push notifications
  - name: Search
    description: Search functionality

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          minLength: 3
          maxLength: 30
        email:
          type: string
          format: email
        displayName:
          type: string
        bio:
          type: string
          maxLength: 500
        avatarUrl:
          type: string
          format: uri
        isPrivate:
          type: boolean
        isVerified:
          type: boolean
        followersCount:
          type: integer
        followingCount:
          type: integer
        postsCount:
          type: integer
        createdAt:
          type: string
          format: date-time

    Post:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        caption:
          type: string
          maxLength: 2200
        mediaUrls:
          type: array
          items:
            type: string
            format: uri
        mediaType:
          type: string
          enum: [image, video, carousel]
        thumbnailUrl:
          type: string
          format: uri
        likesCount:
          type: integer
        commentsCount:
          type: integer
        isLiked:
          type: boolean
        user:
          $ref: '#/components/schemas/UserBasic'
        createdAt:
          type: string
          format: date-time

    UserBasic:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        displayName:
          type: string
        avatarUrl:
          type: string
          format: uri
        isVerified:
          type: boolean

    Comment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        postId:
          type: string
          format: uuid
        text:
          type: string
        user:
          $ref: '#/components/schemas/UserBasic'
        createdAt:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          type: string
          format: uuid
        conversationId:
          type: string
          format: uuid
        senderId:
          type: string
          format: uuid
        receiverId:
          type: string
          format: uuid
        text:
          type: string
        mediaUrl:
          type: string
          format: uri
        deliveredAt:
          type: string
          format: date-time
        readAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [like, comment, follow, follow_request, mention, message]
        title:
          type: string
        body:
          type: string
        actor:
          $ref: '#/components/schemas/UserBasic'
        readAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        statusCode:
          type: integer

paths:
  # ==================== AUTH ====================
  /auth/signup:
    post:
      tags: [Auth]
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password]
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                displayName:
                  type: string
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags: [Auth]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Invalid credentials

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [refreshToken]
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string

  # ==================== USERS ====================
  /users/{userId}:
    get:
      tags: [Users]
      summary: Get user profile
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found

    put:
      tags: [Users]
      summary: Update user profile
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                bio:
                  type: string
                avatarUrl:
                  type: string
                isPrivate:
                  type: boolean
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/search:
    get:
      tags: [Users]
      summary: Search users
      security:
        - BearerAuth: []
      parameters:
        - name: q
          in: query
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserBasic'

  # ==================== POSTS ====================
  /posts:
    post:
      tags: [Posts]
      summary: Create new post
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [mediaUrls, mediaType]
              properties:
                caption:
                  type: string
                mediaUrls:
                  type: array
                  items:
                    type: string
                mediaType:
                  type: string
                  enum: [image, video, carousel]
                visibility:
                  type: string
                  enum: [public, followers, private]
      responses:
        '201':
          description: Post created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

  /posts/{postId}:
    get:
      tags: [Posts]
      summary: Get single post
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'

    delete:
      tags: [Posts]
      summary: Delete post
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Post deleted

  # ==================== FEED ====================
  /feed:
    get:
      tags: [Feed]
      summary: Get user feed
      security:
        - BearerAuth: []
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: Feed posts
          content:
            application/json:
              schema:
                type: object
                properties:
                  posts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Post'
                  nextCursor:
                    type: string

  # ==================== SOCIAL ====================
  /posts/{postId}/like:
    post:
      tags: [Social]
      summary: Like a post
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post liked
        '400':
          description: Already liked

    delete:
      tags: [Social]
      summary: Unlike a post
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Post unliked

  /posts/{postId}/comments:
    get:
      tags: [Social]
      summary: Get post comments
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
        - name: cursor
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Comments list
          content:
            application/json:
              schema:
                type: object
                properties:
                  comments:
                    type: array
                    items:
                      $ref: '#/components/schemas/Comment'

    post:
      tags: [Social]
      summary: Add comment to post
      security:
        - BearerAuth: []
      parameters:
        - name: postId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [text]
              properties:
                text:
                  type: string
                  maxLength: 500
      responses:
        '201':
          description: Comment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'

  /users/{userId}/follow:
    post:
      tags: [Social]
      summary: Follow user
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User followed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum: [pending, accepted]

    delete:
      tags: [Social]
      summary: Unfollow user
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User unfollowed

  # ==================== CHAT ====================
  /conversations:
    get:
      tags: [Chat]
      summary: Get user conversations
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Conversations list
          content:
            application/json:
              schema:
                type: object
                properties:
                  conversations:
                    type: array
                    items:
                      type: object

  /conversations/{conversationId}/messages:
    get:
      tags: [Chat]
      summary: Get conversation messages
      security:
        - BearerAuth: []
      parameters:
        - name: conversationId
          in: path
          required: true
          schema:
            type: string
        - name: cursor
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Messages list
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'

  # ==================== NOTIFICATIONS ====================
  /notifications:
    get:
      tags: [Notifications]
      summary: Get user notifications
      security:
        - BearerAuth: []
      parameters:
        - name: cursor
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Notifications list
          content:
            application/json:
              schema:
                type: object
                properties:
                  notifications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Notification'

  /notifications/mark-read:
    post:
      tags: [Notifications]
      summary: Mark notifications as read
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Notifications marked as read

  # ==================== UPLOAD ====================
  /upload/presigned-url:
    get:
      tags: [Posts]
      summary: Get presigned S3 URL for upload
      security:
        - BearerAuth: []
      parameters:
        - name: fileType
          in: query
          required: true
          schema:
            type: string
        - name: contentType
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Presigned URL generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  uploadUrl:
                    type: string
                  fileUrl:
                    type: string
